AWSTemplateFormatVersion: '2010-09-09'
Description: 'GenAI Pipeline with ARM64/Graviton optimization'

Parameters:
  ProjectName:
    Type: String
    Default: GenAIPipeline
    Description: Name of the project
  
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Deployment environment

Resources:
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'

  # Lambda Function
  GenAIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-${Environment}
      Runtime: python3.9
      Architectures:
        - arm64
      Handler: main.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          
          def run_inference(data):
              """Run GenAI model inference on processed data."""
              try:
                  bedrock = boto3.client('bedrock-runtime')
                  
                  # Prepare prompt
                  prompt = data.get('prompt', 'Hello, how can I help you?')
                  
                  # Call Bedrock model
                  response = bedrock.invoke_model(
                      modelId='anthropic.claude-3-haiku-20240307-v1:0',
                      contentType='application/json',
                      accept='application/json',
                      body=json.dumps({
                          'anthropic_version': 'bedrock-2023-05-31',
                          'max_tokens': 500,
                          'messages': [{'role': 'user', 'content': prompt}]
                      })
                  )
                  
                  response_body = json.loads(response.get('body').read())
                  return {
                      'inference_complete': True,
                      'result': response_body['content'][0]['text'],
                      'data': data
                  }
              except Exception as e:
                  return {
                      'inference_complete': False,
                      'error': str(e),
                      'data': data
                  }
          
          def lambda_handler(event, context):
              """AWS Lambda handler for model inference."""
              try:
                  # Handle both API Gateway and Function URL formats
                  if 'body' in event:
                      data = json.loads(event['body']) if isinstance(event['body'], str) else event['body']
                  else:
                      data = event
                  
                  # Run inference
                  result = run_inference(data)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps(result),
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Methods': 'POST, OPTIONS',
                          'Access-Control-Allow-Headers': 'Content-Type'
                      }
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)}),
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      }
                  }
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Function URL for direct access
  FunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt GenAIFunction.Arn
      Cors:
        AllowOrigins:
          - '*'
        AllowMethods:
          - POST
          - OPTIONS
        AllowHeaders:
          - Content-Type
        MaxAge: 86400

  # Permission for Function URL
  FunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GenAIFunction
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
      FunctionUrlAuthType: NONE

Outputs:
  FunctionUrl:
    Description: URL for the Lambda function
    Value: !GetAtt FunctionUrl.FunctionUrl
  
  FunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt GenAIFunction.Arn