AWSTemplateFormatVersion: '2010-09-09'
Description: 'ðŸš€ One-Click GenAI Pipeline - ARM64 Lambda Deployment'

Parameters:
  ProjectName:
    Type: String
    Default: MyGenAIPipeline
    Description: Your project name (no spaces)
    AllowedPattern: '^[a-zA-Z0-9-]*$'
    ConstraintDescription: Only alphanumeric characters and hyphens allowed

Resources:
  # IAM Role for Lambda
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-Lambda-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'

  # Lambda Function (ARM64)
  GenAIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-GenAI-ARM64'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Architectures: [arm64]
      Timeout: 300
      MemorySize: 1024
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime
          
          def lambda_handler(event, context):
              try:
                  # Parse request
                  if 'body' in event:
                      body = json.loads(event['body']) if isinstance(event['body'], str) else event['body']
                  else:
                      body = event
                  
                  prompt = body.get('prompt', 'Hello! How can I help you today?')
                  
                  # Call Bedrock
                  bedrock = boto3.client('bedrock-runtime')
                  response = bedrock.invoke_model(
                      modelId='anthropic.claude-3-haiku-20240307-v1:0',
                      contentType='application/json',
                      accept='application/json',
                      body=json.dumps({
                          'anthropic_version': 'bedrock-2023-05-31',
                          'max_tokens': 500,
                          'messages': [{'role': 'user', 'content': prompt}]
                      })
                  )
                  
                  result = json.loads(response.get('body').read())
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'success': True,
                          'response': result['content'][0]['text'],
                          'architecture': 'ARM64-Graviton',
                          'cost_savings': '40% vs x86',
                          'timestamp': datetime.utcnow().isoformat()
                      })
                  }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({'error': str(e)})
                  }

  # Function URL
  FunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !Ref GenAIFunction
      AuthType: NONE
      Cors:
        AllowOrigins: ['*']
        AllowMethods: ['POST', 'GET']
        AllowHeaders: ['Content-Type']

  # Permission for Function URL
  FunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GenAIFunction
      Action: lambda:InvokeFunctionUrl
      Principal: '*'

Outputs:
  ApiEndpoint:
    Description: 'ðŸš€ Your GenAI API Endpoint (ARM64/Graviton)'
    Value: !GetAtt FunctionUrl.FunctionUrl
    
  TestCommand:
    Description: 'ðŸ§ª Test your API'
    Value: !Sub |
      curl -X POST "${FunctionUrl.FunctionUrl}" \
        -H "Content-Type: application/json" \
        -d '{"prompt": "What is AI?"}'
        
  CostSavings:
    Description: 'ðŸ’° Expected savings vs x86'
    Value: '40% cost reduction with ARM64/Graviton'